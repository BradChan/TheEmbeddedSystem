================================
3.3 Python解释器和Python脚本
================================

前面两节所讨论的内容中假设我们使用编译型语言开发嵌入式系统软件，过去的20年内这是非常常见的。近些年Python、JavaScript等脚本语言盛行，
不仅被广泛用于桌面计算机系统的应用程序开发，还用于服务器软件部署，以及各种网络应用程序开发，并逐步进入嵌入式系统软件开发领域。今天，
Python和JavaScript等都是嵌入式系统软件开发的语言。本节探讨Python脚本语言如何用于嵌入式系统软件开发以及相关的基本概念。

C/C++语言是典型的编译型编程语言，编程者必须将C/C++源码及其所用的第三方库的源码一起使用编译器(编译型语言的工具链之一)逐个地转换成目标计算机系统的
汇编语言程序，然后再把这些汇编语言程序和所用的第三方汇编语言库和二进制库一起使用链接器(编译型语言的工具链之一)转换成可被目标计算机系统执行的机器码文件，
然后借助于专用的下载器(如JTAG)将这个机器码文件下载到嵌入式系统板上的指定ROM空间(如片上FlashROM的Code区)，然后再给系统复位后才开始执行我们的程序。
这是我们再第一章中就提到的使用编译型语言开发嵌入式系统软件的部分常规流程。

然而，Python脚本语言程序的特殊运行环境——Python解释器彻底改变嵌入式系统软件开发的流程。Python解释器是一个独立的应用程序，可以从文件逐行读入Python
脚本程序，且逐行执行并立即给出执行结果。作为一个独立的应用程序，Python解释器本身与操作系统和硬件有关，即不同系统使用不同的Python解释器，
譬如到Python官网 [1]_ 下载一个最新版的Python解释器时被提醒根据自己的计算机系统所用的OS类型来选择下载源，换句话说，我们也不能让某个嵌入式系统
执行桌面计算机可用的Python解释器。因此，Python解释器有很多种版本，虽然他们支持的Python语言的语法并无区别，但支持的内部库存在一定区别。

软硬件运行环境的高度依赖性，意味着每一个嵌入式系统都有一个独立的Python解释器，虽然他们大多数的区别并不大。Python之所以得到广泛认可，原因有多个方面，
但是高效率地编程特点是最关键原因之一，Bruce Eckel使用“Life is short, you need Python(人生苦短，我用Python)”来描述Python的这一特点。
Python语法简洁，在Python解释器环境无需编译即可直接执行，仅仅这一特点就可以让编译型语言立现笨拙。

除了能从Python脚本程序文件中逐行地读入-执行-输出结果之外，Python解释器也支持从交互型控制台(一种命令行输入和输出的接口)接收输入的Python语句，
并立即执行且输出结果，这个过程被称作REPL，即“读取(Read)-运算(Eval)-输出(Print)-循环(Loop)”的首字母缩写。

Python解释器很像一台能够执行脚本语句的计算机，具有普通桌面计算机一样的文件系统(脚本程序文件和库文件等)和人机交互接口(接收脚本语句并输出执行结果)。
我们在第一章的图1.12中对比编译型语言程序和脚本语言程序是如何转换成机器码的过程。虽然Python解释器有很多种版本，无论是在桌面计算机或嵌入式系统上运行的Python解释器，
一个与硬件无关的算法型Python脚本程序都能直接执行，而且执行结果也都一样。为什么有这样的统一性为什么呢？需要了解Python解释器的工作机制。我们知道，
不同指令架构体系的CPU的指令集完全不同，任何编程语言所编写的计算机程序都必须被转换成机器码才能被目标计算机系统所执行。但是，“虚拟机(Virtual Machine)”
的定义表面上打破这个原则，使得同一功能软件能够跨平台使用，譬如Java虚拟机。Python解释器也是基于虚拟机的概念，建立在虚拟机之上的脚本解释器表面上是跨指令架构体系的，
使得硬件无关的Python脚本程序能够被所有Python解释器执行。Python解释器和虚拟机如何执行脚本程序参见图3.10所示。

.. image:: ../_static/images/c3/python_software_execute_procedure.jpg
  :scale: 40%
  :align: center

图3.10  Python解释器和虚拟机

表面上看，Python脚本程序不需要编译和链接即可被执行，但仍需要被转换为机器码才能被特定CPU执行。Python解释器将脚本程序逐行转换为Python虚拟机认识的中间代码——字节码，
虚拟机再将字节码转换为机器码交给硬件执行。Python解释器和虚拟机的软件架构不仅让Python脚本程序能够跨指令集体系执行，且无需编译和链接。这与Java虚拟机解决跨平台问题有着相似之处，
但Java源程序仍需要先编译后才能执行。

--------------------------

嵌入式系统使用的Python解释器的软件架构是什么样的呢？如图3.11所示。与桌面计算机系统所使用的Python解释器的软件架构相比，Bootloader是嵌入式系统特有的，
用于更新Python解释器固件，当然这是可选择的部分，独立于Python解释器之外的。当我们需要升级Python解释器固件时，借助于Bootloader将更容易且无需专用工具。
使用Boot引脚和复位引脚的配置可以让系统进入Bootloader。

.. image:: ../_static/images/c3/python_interpreter_structure.jpg
  :scale: 40%
  :align: center

图3.11  嵌入式系统使用的Python解释器的软件架构

Python解释器启动后首先从文件系统中打开并执行Python主程序，一般来说这个主程序的文件名是预设的，譬如code.py或main.py。执行Python主程序期间如果需要
使用某些Python库，对应的库文件必须已在文件系统中，否则会终止执行主程序并从字符控制台输出出错的文件、代码位置(行数)和可能的原因等信息，然后进入REPL状态。

Python解释器启动后如果未找到预设的Python主程序，解释器处于REPL状态，即能够从字符控制台接收Python脚本语句，当接收到“回车”字符(即0x13)时立即执行该语句。
当Python解释器执行Python主程序期间REPL自动关闭，Python主程序执行完毕后自动进入REPL状态。如果Python主程序进入无穷循环，我们可以通过字符控制台向Python
解释器发送组合键“Ctrol+c”字符(即0x03)以终止Python主程序强制进入REPL状态。

总而言之，嵌入式系统的Python解释器有两种状态：REPL状态和执行Python主程序状态。REPL状态常用于调试脚本程序，或诊断系统硬件单元。

--------------------------

如何为一个特定的嵌入式系统制作Python解释器呢？几乎所以Python解释器都是使用C/C++语言编写的，即Python解释器本身是一个特殊的应用程序，如著名的MicroPython
完全使用C/C++编写，在嵌入式系统中这样的应用程序的机器码被称作固件，最简单的制作Python解释器的方法是下载现成的固件，譬如链接 [2]_ 页面有数十种MicroPython
固件可用。如果你还记得“每一种嵌入式系统有一个独立的Python解释器”，如果你使用 [2]_ 页面的某个嵌入式系统硬件，那么这里的Python解释器就可以直接使用。

如果我们必须自定义嵌入式系统的硬件，且允许使用STM32F4xx、CC3x00、ESP32或ESP8266等作为系统MCU/SoC，制作自定义硬件系统可用的Python解释器也很容易，
因为绝大多数Python解释器是开源的且运行该解释器的嵌入式系统硬件也是开源的。具体过程包括：1) 参考相关的开源硬件定义自己的嵌入式系统硬件电路；2) 搭建
开源Python解释器的编译环境(含编译器等工具链)；3) 下载开源Python解释器的源码；4) 根据自定义的系统硬件资源修改/移植Python解释器源码；5) 编译并输出
Python解释器固件；6) 下载到自定义的嵌入式系统。其中的第4步是关键，主要涉及MCU片上外设和I/O引脚用法、片外扩展资源的接口等相关代码的修改，这些工作需要
C/C++编程经验。

如果你嫌弃开源的MicroPython解释器支持的MCU类型太少，作为MicroPython的后裔——CircuitPython [3]_ 支持更多种ARM Cortex-M0/M0+/M4/M7系列MCU。
虽然Python解释器目前支持的MCU仅限ARM Cortex-M和ESP两个系列的MCU/SoC，相信不久的将来在开源社区将会涌现更多种Python解释器。将开源Python解释器
移植到其他MCU很难吗？理论上将不难，但是工作量很大，尤其Python虚拟机部分代码必须针对目标MCU的指令集、存储器系统和中断系统等完全重构。当你体会到
Python的便捷性和高效率时，务必记得“你的轻松是因为有人替你负重前行”。

然而，除了自己编写的Python脚本程序之外，Python解释器并不能改进我们的嵌入式系统产品的功能，他仅仅是执行Python脚本程序的一种特殊软硬件环境。现在的问题是，
编写Python脚本程序的模式是什么样子？

Python是一种典型的面向对象编程(Object Oriented Programming)语言，因此Python编程模式与其他OOP语言相似，支持封装、继承和多态等特性，而且Python还支持
更灵活的动态库加载方法。此外，Python语言本身不仅支持常用的基本数据类型(包括实数型和复数型、数组、字符串等)，还支持列表、元组、字典等复合数据类型。
总之，Python是一种易学易用的高效的脚本编程语言。

--------------------------

最新的热门编程语言排行榜上，除了Python脚本编程语言之外，JavaScript脚本编程语言也十分流行，支持Python的大多数嵌入式系统都支持JavaScript语言。
执行JavaScript脚本程序必须使用JavaScript解释器，他与Python解释器的架构相似。

--------------------------

参考文献：
::

.. [1] https://www.python.org/
.. [2] http://micropython.org/download/all/ 
.. [3] https://circuitpython.org/ 
