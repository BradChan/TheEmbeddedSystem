================================
3.3 Python解释器和Python脚本
================================

前面两节所讨论的内容中假设我们使用编译型语言开发嵌入式系统软件，过去的20年内这是非常常见的。近些年Python、JavaScript等脚本语言盛行，
不仅被广泛用于桌面计算机系统的应用程序开发，还用于服务器软件部署，以及各种网络应用程序开发，并逐步进入嵌入式系统软件开发领域。今天，
Python和JavaScript等都是嵌入式系统软件开发的语言。本节探讨Python脚本语言如何用于嵌入式系统软件开发以及相关的基本概念。

C/C++语言是典型的编译型编程语言，编程者必须将C/C++源码及其所用的第三方库的源码一起使用编译器(编译型语言的工具链之一)逐个地转换成目标计算机系统的
汇编语言程序，然后再把这些汇编语言程序和所用的第三方汇编语言库和二进制库一起使用链接器(编译型语言的工具链之一)转换成可被目标计算机系统执行的机器码文件，
然后借助于专用的下载器(如JTAG)将这个机器码文件下载到嵌入式系统板上的指定ROM空间(如片上FlashROM的Code区)，然后再给系统复位后才开始执行我们的程序。
这是我们再第一章中就提到的使用编译型语言开发嵌入式系统软件的部分常规流程。

然而，Python脚本语言程序的特殊运行环境——Python解释器彻底改变嵌入式系统软件开发的流程。Python解释器是一个独立的应用程序，可以从文件逐行读入Python
脚本程序，且逐行执行并立即给出执行结果。作为一个独立的应用程序，Python解释器本身与操作系统和硬件有关，即不同系统使用不同的Python解释器，
譬如到Python官网 [1]_ 下载一个最新版的Python解释器时被提醒根据自己的计算机系统所用的OS类型来选择下载源，换句话说，我们也不能让某个嵌入式系统
执行桌面计算机可用的Python解释器。

软硬件运行环境的高度依赖性，意味着每一个嵌入式系统都有一个独立的Python解释器，虽然他们大多数的区别并不大。Python之所以得到广泛认可，原因有多个方面，
但是高效率地编程特点是最关键原因之一，Bruce Eckel使用“Life is short, you need Python(人生苦短，我用Python)”来描述Python的这一特点。
Python语法简洁，在Python解释器环境无需编译即可直接执行，仅仅这一特点就可以让编译型语言立现笨拙。

除了能从Python脚本程序文件中逐行地读入-执行-输出结果之外，Python解释器也支持从交互型控制台(一种命令行输入和输出的接口)接受输入的Python程序，
立即执行并立即输出结果。这个过程被称作REPL，即“读取(Read)-运算(Eval)-输出(Print)-循环(Loop)”的首字母缩写。

如何为一个特定的嵌入式系统制作Python解释器呢?




--------------------------

参考文献：
::

.. [1] https://www.python.org/

