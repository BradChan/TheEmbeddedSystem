===========================
5.3 I2C从机模式
===========================

绝大多数情况，嵌入式系统的MCU都是系统的主控制器，MCU片上I2C功能单元都工作在主机模式与系统内的I2C接口的传感器、执行器或显示器等外设互联。
但也有少数情况MCU片上I2C功能单元工作在从机模式，譬如通过I2C接口升级MCU固件，或者通过I2C接口协同工作的两个MCU组成的系统中一个MCU做主机另一个做从机。
本节主要了解MCU片上I2C功能单元工作在从机模式下的编程控制。注意，并不是所有MCU片上I2C功能单元都支持主机模式和从机模式，有些MCU仅支持主机模式的I2C接口。

当我们把MCU片上I2C功能单元配置为从机模式时，其内部结构组成如图5.7所示。

.. image:: ../_static/images/c5/i2c_slave_mcu_structure.jpg
  :scale: 40%
  :align: center

图5.7  从机模式的MCU片上I2C功能单元的结构组成

在从机模式下，MCU的I2C接口所使用的I/O引脚中，连接SCL信号的是输入引脚，SDA信号的是双向引脚。根据I2C通讯接口的要求，任一从机都必须有惟一的从机地址，
当我们将MCU片上I2C功能单元配置为从机模式时，必须指定本机的7位惟一地址。相对于主机，从机始终是被动的，主机何时寻址本机、读或写操作均有主机发起。
因此，从机模式需要配置一定RAM空间用于缓存接收数据，并开启中断，当从模式的I2C接口识别到本机被寻址，并接收到主机的数据时，向CPU发起中断请求并响应主机请求。

Arduino的I2C通讯接口的硬件抽象层不仅支持主机模式，也支持从机模式。从机模式的I2C硬件抽象层接口共有7各，具体接口如下：

.. Note::  I2C硬件抽象层接口(仅从机模式的接口)

  1. **begin(slave_addr)**，将I2C通讯接口配置为从机模式，并配置惟一的7位从机地址、SCL和SDA的I/O引脚、SCL时钟速度(使用默认的设置)、中断等。注意，只能在初始化时调用一次
  2. **write(val)/**，向主机写/发送数据(当主机请求数据时，即“OnRequest”事件发生后)。这个接口还有另外两种形式：write(val[], len)和write(string)
  3. **available()**，返回接收缓冲区中有效的/可读取的字节数据个数，即“onReceive”事件发生后使用该接口检查接收缓冲区的有效数据字节数
  4. **read()**，从接收缓冲区读取有效数据
  5. **onReceive(cb_rev)**，注册“onReceive”事件的回调函数，当“onReceive”事件发生后需要执行的代码，譬如读取接收缓冲区的数据并处理
  6. **OnRequest(cb_req)**，注册“OnRequest”事件的回调函数，当“OnRequest”事件发生后需要执行的代码，譬如调用“write()”发送数据给主机

注意，Arduino平台的I2C硬件抽象层的主机模式和从机模式的接口都被封装在“TwoWire类”中，详见页面 [1]_ ，从机模式的接口仅有这6种(具体种类还与Arduino内核的版本有关)，
主机模式共8种接口(见前一节)，其中部分接口是主机模式和从机模式共用的，如“write()”、“read()”、“available()”等，部分接口是各自专用的，
譬如注册事件的回调函数是从机模式专用的接口，而“beginTransmission()”、“endTransmission()”和“setClock()”是主机模式专用的接口。

使用I2C硬件抽象层的主机模式接口和从机模式接口，两个MCU之间的通讯流程参见图5.8所示。

.. image:: ../_static/images/c5/i2c_two_mcus_comunication_flow.jpg
  :scale: 40%
  :align: center

图5.8  两个MCU之间使用I2C通讯的工作流程(使用硬件抽象层接口)







-------------------------

参考文献：
::

.. [1] https://www.arduino.cc/en/Reference/Wire
